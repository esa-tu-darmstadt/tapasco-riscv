diff --git a/core/taiga_config.sv b/core/taiga_config.sv
index 9507d5f..454b003 100755
--- a/core/taiga_config.sv
+++ b/core/taiga_config.sv
@@ -84,20 +84,20 @@ package taiga_config;
 
     ////////////////////////////////////////////////////
     //Address space
-    localparam SCRATCH_ADDR_L = 32'h80000000;
-    localparam SCRATCH_ADDR_H = 32'h8001FFFF;
+    localparam SCRATCH_ADDR_L = 32'h00000000;
+    localparam SCRATCH_ADDR_H = 32'h0000FFFF;
     localparam SCRATCH_BIT_CHECK = 4;
 
-    localparam MEMORY_ADDR_L = 32'h40000000;
-    localparam MEMORY_ADDR_H = 32'h4FFFFFFF;
-    localparam MEMORY_BIT_CHECK = 4;
+    localparam MEMORY_ADDR_L = 32'h80000000;
+    localparam MEMORY_ADDR_H = 32'hFFFFFFFF;
+    localparam MEMORY_BIT_CHECK = 1;
 
-    localparam BUS_ADDR_L = 32'h60000000;
-    localparam BUS_ADDR_H = 32'h6FFFFFFF;
+    localparam BUS_ADDR_L = 32'h11000000;
+    localparam BUS_ADDR_H = 32'h11FFFFFF;
     localparam BUS_BIT_CHECK = 4;
 
     //PC address on reset
-    localparam bit[31:0] RESET_VEC = 32'h80000000;
+    localparam bit[31:0] RESET_VEC = 32'h00000000;
 
     ////////////////////////////////////////////////////
     //Bus Options
diff --git a/core/taiga_wrapper.sv b/core/taiga_wrapper.sv
new file mode 100644
index 0000000..eef9c9e
--- /dev/null
+++ b/core/taiga_wrapper.sv
@@ -0,0 +1,227 @@
+/*
+ * Copyright © 2019 Carsten Heinz
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import taiga_config::*;
+import taiga_types::*;
+import l2_config_and_types::*;
+
+module taiga_wrapper (
+	input logic clk,
+	input logic rst,
+
+	output wire [29:0] instruction_bram_addr,
+	output wire        instruction_bram_en,
+	output wire [3:0]  instruction_bram_we,
+	output wire [31:0] instruction_bram_din,
+	input  wire [31:0] instruction_bram_dout,
+
+	output wire [29:0] data_bram_addr,
+	output wire        data_bram_en,
+	output wire [3:0]  data_bram_we,
+	output wire [31:0] data_bram_din,
+	input  wire [31:0] data_bram_dout,
+
+	// AXI Bus
+	// AXI Write Channels
+	output wire                            m_axi_awvalid,
+	input  wire                            m_axi_awready,
+	output wire [5:0]                      m_axi_awid,
+	output wire [31:0]                     m_axi_awaddr,
+	//~ output wire [3:0]                      m_axi_awregion,
+	output wire [7:0]                      m_axi_awlen,
+	output wire [2:0]                      m_axi_awsize,
+	output wire [1:0]                      m_axi_awburst,
+	//~ output wire                            m_axi_awlock,
+	output wire [3:0]                      m_axi_awcache,
+	//~ output wire [2:0]                      m_axi_awprot,
+	//~ output wire [3:0]                      m_axi_awqos,
+
+	output wire                            m_axi_wvalid,
+	input  wire                            m_axi_wready,
+	output wire [31:0]                     m_axi_wdata,
+	output wire [3:0]                      m_axi_wstrb,
+	output wire                            m_axi_wlast,
+
+	input  wire                            m_axi_bvalid,
+	output wire                            m_axi_bready,
+	input  wire [1:0]                      m_axi_bresp,
+	input  wire [5:0]                      m_axi_bid,
+
+	// AXI Read Channels
+	output wire                            m_axi_arvalid,
+	input  wire                            m_axi_arready,
+	output wire [5:0]                      m_axi_arid,
+	output wire [31:0]                     m_axi_araddr,
+	//~ output wire [3:0]                      m_axi_arregion,
+	output wire [7:0]                      m_axi_arlen,
+	output wire [2:0]                      m_axi_arsize,
+	output wire [1:0]                      m_axi_arburst,
+	//~ output wire                            m_axi_arlock,
+	output wire [3:0]                      m_axi_arcache,
+	//~ output wire [2:0]                      m_axi_arprot,
+	//~ output wire [3:0]                      m_axi_arqos,
+
+	input  wire                            m_axi_rvalid,
+	output wire                            m_axi_rready,
+	input  wire [5:0]                      m_axi_rid,
+	input  wire [31:0]                     m_axi_rdata,
+	input  wire [1:0]                      m_axi_rresp,
+	input  wire                            m_axi_rlast,
+
+	// AXI Cache
+	// AXI Write Channels
+	output wire                            axi_awvalid,
+	input  wire                            axi_awready,
+	output wire [5:0]                      axi_awid,
+	output wire [31:0]                     axi_awaddr,
+	//~ output wire [3:0]                      axi_awregion,
+	output wire [7:0]                      axi_awlen,
+	output wire [2:0]                      axi_awsize,
+	output wire [1:0]                      axi_awburst,
+	//~ output wire                            axi_awlock,
+	output wire [3:0]                      axi_awcache,
+	output wire [2:0]                      axi_awprot,
+	//~ output wire [3:0]                      axi_awqos,
+
+	output wire                            axi_wvalid,
+	input  wire                            axi_wready,
+	output wire [31:0]                     axi_wdata,
+	output wire [3:0]                      axi_wstrb,
+	output wire                            axi_wlast,
+
+	input  wire                            axi_bvalid,
+	output wire                            axi_bready,
+	input  wire [1:0]                      axi_bresp,
+	input  wire [5:0]                      axi_bid,
+
+	// AXI Read Channels
+	output wire                            axi_arvalid,
+	input  wire                            axi_arready,
+	output wire [5:0]                      axi_arid,
+	output wire [31:0]                     axi_araddr,
+	//~ output wire [3:0]                      axi_arregion,
+	output wire [7:0]                      axi_arlen,
+	output wire [2:0]                      axi_arsize,
+	output wire [1:0]                      axi_arburst,
+	//~ output wire                            axi_arlock,
+	output wire [3:0]                      axi_arcache,
+	output wire [2:0]                      axi_arprot,
+	//~ output wire [3:0]                      axi_arqos,
+
+	input  wire                            axi_rvalid,
+	output wire                            axi_rready,
+	input  wire [5:0]                      axi_rid,
+	input  wire [31:0]                     axi_rdata,
+	input  wire [1:0]                      axi_rresp,
+	input  wire                            axi_rlast,
+
+	input logic timer_interrupt,
+	input logic interrupt
+);
+
+local_memory_interface instruction_bram();
+assign instruction_bram_addr = {instruction_bram.addr[27:0],2'b0};
+assign instruction_bram_en = instruction_bram.en;
+assign instruction_bram_we = instruction_bram.be;
+assign instruction_bram_din = instruction_bram.data_in;
+assign instruction_bram.data_out = instruction_bram_dout;
+
+local_memory_interface data_bram();
+assign data_bram_addr = {data_bram.addr[27:0],2'b0};
+assign data_bram_en = data_bram.en;
+assign data_bram_we = data_bram.be;
+assign data_bram_din = data_bram.data_in;
+assign data_bram.data_out = data_bram_dout;
+
+axi_interface m_axi();
+assign m_axi_awvalid = m_axi.awvalid;
+assign m_axi.awready = m_axi_awready;
+assign m_axi_awid = m_axi.awid;
+assign m_axi_awaddr = m_axi.awaddr;
+assign m_axi_awlen = m_axi.awlen;
+assign m_axi_awsize = m_axi.awsize;
+assign m_axi_awburst = m_axi.awburst;
+assign m_axi_awcache = m_axi.awcache;
+
+assign m_axi_wvalid = m_axi.wvalid;
+assign m_axi.wready = m_axi_wready;
+assign m_axi_wdata = m_axi.wdata;
+assign m_axi_wstrb = m_axi.wstrb;
+assign m_axi_wlast = m_axi.wlast;
+
+assign m_axi.bvalid = m_axi_bvalid;
+assign m_axi_bready = m_axi.bready;
+assign m_axi.bresp = m_axi_bresp;
+assign m_axi.bid = m_axi_bid;
+
+assign m_axi_arvalid = m_axi.arvalid;
+assign m_axi.arready = m_axi_arready;
+assign m_axi_arid = m_axi.arid;
+assign m_axi_araddr = m_axi.araddr;
+assign m_axi_arlen = m_axi.arlen;
+assign m_axi_arsize = m_axi.arsize;
+assign m_axi_arburst = m_axi.arburst;
+assign m_axi_arcache = m_axi.arcache;
+
+assign m_axi.rvalid = m_axi_rvalid;
+assign m_axi_rready = m_axi.rready;
+assign m_axi.rid = m_axi_rid;
+assign m_axi.rdata = m_axi_rdata;
+assign m_axi.rresp = m_axi_rresp;
+assign m_axi.rlast = m_axi_rlast;
+
+avalon_interface m_avalon();
+wishbone_interface m_wishbone();
+
+l2_requester_interface l2[L2_NUM_PORTS-1:0]();
+assign l2[1].request_push = 0;
+assign l2[1].wr_data_push = 0;
+assign l2[1].inv_ack = l2[1].inv_valid;
+assign l2[1].rd_data_ack = l2[1].rd_data_valid;
+
+l2_memory_interface arb_mem();
+
+taiga taiga (
+	.clk(clk),
+	.rst(rst),
+
+	.instruction_bram(instruction_bram),
+	.data_bram(data_bram),
+
+	.m_axi(m_axi),
+	.m_avalon(m_avalon),
+	.m_wishbone(m_wishbone),
+	.l2(l2[0]),
+
+	.timer_interrupt(0),
+	.interrupt(0)
+);
+
+l2_arbiter l2_arb (
+	.clk(clk),
+	.rst(rst),
+	.request(l2),
+	.mem(arb_mem)
+);
+
+axi_to_arb l2_to_mem (
+	.clk(clk),
+	.rst(rst),
+	.l2(arb_mem),
+	.* // e.g. axi_*
+);
+
+endmodule
diff --git a/core/taiga_wrapper_verilog.v b/core/taiga_wrapper_verilog.v
new file mode 100644
index 0000000..872e62c
--- /dev/null
+++ b/core/taiga_wrapper_verilog.v
@@ -0,0 +1,267 @@
+/*
+ * Copyright © 2019 Carsten Heinz
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+module taiga_wrapper_verilog (
+	input wire clk,
+	input wire rst,
+
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram CLK" *)
+	output wire        instruction_bram_clk,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram RST" *)
+	output wire        instruction_bram_rst,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram ADDR" *)
+	output wire [29:0] instruction_bram_addr,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram EN" *)
+	output wire        instruction_bram_en,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram WE" *)
+	output wire [3:0]  instruction_bram_we,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram DIN" *)
+	output wire [31:0] instruction_bram_din,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 instruction_bram DOUT" *)
+	input  wire [31:0] instruction_bram_dout,
+
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram CLK" *)
+	output wire        data_bram_clk,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram RST" *)
+	output wire        data_bram_rst,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram ADDR" *)
+	output wire [29:0] data_bram_addr,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram EN" *)
+	output wire        data_bram_en,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram WE" *)
+	output wire [3:0]  data_bram_we,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram DIN" *)
+	output wire [31:0] data_bram_din,
+	(* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 data_bram DOUT" *)
+	input  wire [31:0] data_bram_dout,
+
+	// AXI Bus
+	// AXI Write Channels
+	output wire                            m_axi_awvalid,
+	input  wire                            m_axi_awready,
+	//~ output wire [5:0]                      m_axi_awid,
+	output wire [31:0]                     m_axi_awaddr,
+	//~ output wire [3:0]                      m_axi_awregion,
+	output wire [7:0]                      m_axi_awlen,
+	output wire [2:0]                      m_axi_awsize,
+	output wire [1:0]                      m_axi_awburst,
+	//~ output wire                            m_axi_awlock,
+	output wire [3:0]                      m_axi_awcache,
+	//~ output wire [2:0]                      m_axi_awprot,
+	//~ output wire [3:0]                      m_axi_awqos,
+
+	output wire                            m_axi_wvalid,
+	input  wire                            m_axi_wready,
+	output wire [31:0]                     m_axi_wdata,
+	output wire [3:0]                      m_axi_wstrb,
+	output wire                            m_axi_wlast,
+
+	input  wire                            m_axi_bvalid,
+	output wire                            m_axi_bready,
+	input  wire [1:0]                      m_axi_bresp,
+	//~ input  wire [5:0]                      m_axi_bid,
+
+	// AXI Read Channels
+	output wire                            m_axi_arvalid,
+	input  wire                            m_axi_arready,
+	//~ output wire [5:0]                      m_axi_arid,
+	output wire [31:0]                     m_axi_araddr,
+	//~ output wire [3:0]                      m_axi_arregion,
+	output wire [7:0]                      m_axi_arlen,
+	output wire [2:0]                      m_axi_arsize,
+	output wire [1:0]                      m_axi_arburst,
+	//~ output wire                            m_axi_arlock,
+	output wire [3:0]                      m_axi_arcache,
+	//~ output wire [2:0]                      m_axi_arprot,
+	//~ output wire [3:0]                      m_axi_arqos,
+
+	input  wire                            m_axi_rvalid,
+	output wire                            m_axi_rready,
+	//~ input  wire [5:0]                      m_axi_rid,
+	input  wire [31:0]                     m_axi_rdata,
+	input  wire [1:0]                      m_axi_rresp,
+	input  wire                            m_axi_rlast,
+
+	// AXI Cache
+	// AXI Write Channels
+	output wire                            m_axi_cache_awvalid,
+	input  wire                            m_axi_cache_awready,
+	output wire [5:0]                      m_axi_cache_awid,
+	output wire [31:0]                     m_axi_cache_awaddr,
+	//~ output wire [3:0]                      m_axi_cache_awregion,
+	output wire [7:0]                      m_axi_cache_awlen,
+	output wire [2:0]                      m_axi_cache_awsize,
+	output wire [1:0]                      m_axi_cache_awburst,
+	//~ output wire                            m_axi_cache_awlock,
+	output wire [3:0]                      m_axi_cache_awcache,
+	output wire [2:0]                      m_axi_cache_awprot,
+	//~ output wire [3:0]                      m_axi_cache_awqos,
+
+	output wire                            m_axi_cache_wvalid,
+	input  wire                            m_axi_cache_wready,
+	output wire [31:0]                     m_axi_cache_wdata,
+	output wire [3:0]                      m_axi_cache_wstrb,
+	output wire                            m_axi_cache_wlast,
+
+	input  wire                            m_axi_cache_bvalid,
+	output wire                            m_axi_cache_bready,
+	input  wire [1:0]                      m_axi_cache_bresp,
+	input  wire [5:0]                      m_axi_cache_bid,
+
+	// AXI Read Channels
+	output wire                            m_axi_cache_arvalid,
+	input  wire                            m_axi_cache_arready,
+	output wire [5:0]                      m_axi_cache_arid,
+	output wire [31:0]                     m_axi_cache_araddr,
+	//~ output wire [3:0]                      m_axi_cache_arregion,
+	output wire [7:0]                      m_axi_cache_arlen,
+	output wire [2:0]                      m_axi_cache_arsize,
+	output wire [1:0]                      m_axi_cache_arburst,
+	//~ output wire                            m_axi_cache_arlock,
+	output wire [3:0]                      m_axi_cache_arcache,
+	output wire [2:0]                      m_axi_cache_arprot,
+	//~ output wire [3:0]                      m_axi_cache_arqos,
+
+	input  wire                            m_axi_cache_rvalid,
+	output wire                            m_axi_cache_rready,
+	input  wire [5:0]                      m_axi_cache_rid,
+	input  wire [31:0]                     m_axi_cache_rdata,
+	input  wire [1:0]                      m_axi_cache_rresp,
+	input  wire                            m_axi_cache_rlast
+);
+
+assign instruction_bram_clk = clk;
+assign instruction_bram_rst = rst;
+assign data_bram_clk = clk;
+assign data_bram_rst = rst;
+
+wire [5:0]                      m_axi_awid;
+wire [5:0]                      m_axi_bid;
+wire [5:0]                      m_axi_arid;
+wire [5:0]                      m_axi_rid;
+
+
+taiga_wrapper taiga_wrapper (
+	.clk(clk),
+	.rst(rst),
+
+	.instruction_bram_addr(instruction_bram_addr),
+	.instruction_bram_en(instruction_bram_en),
+	.instruction_bram_we(instruction_bram_we),
+	.instruction_bram_din(instruction_bram_din),
+	.instruction_bram_dout(instruction_bram_dout),
+
+	.data_bram_addr(data_bram_addr),
+	.data_bram_en(data_bram_en),
+	.data_bram_we(data_bram_we),
+	.data_bram_din(data_bram_din),
+	.data_bram_dout(data_bram_dout),
+
+	// AXI Bus
+	.m_axi_awvalid(m_axi_awvalid),
+	.m_axi_awready(m_axi_awready),
+	.m_axi_awid(m_axi_awid),
+	.m_axi_awaddr(m_axi_awaddr),
+	//~ .m_axi_awregion(m_axi_awregion),
+	.m_axi_awlen(m_axi_awlen),
+	.m_axi_awsize(m_axi_awsize),
+	.m_axi_awburst(m_axi_awburst),
+	//~ .m_axi_awlock(m_axi_awlock),
+	.m_axi_awcache(m_axi_awcache),
+	//~ .m_axi_awprot(m_axi_awprot),
+	//~ .m_axi_awqos(m_axi_awqos),
+
+	.m_axi_wvalid(m_axi_wvalid),
+	.m_axi_wready(m_axi_wready),
+	.m_axi_wdata(m_axi_wdata),
+	.m_axi_wstrb(m_axi_wstrb),
+	.m_axi_wlast(m_axi_wlast),
+
+	.m_axi_bvalid(m_axi_bvalid),
+	.m_axi_bready(m_axi_bready),
+	.m_axi_bresp(m_axi_bresp),
+	.m_axi_bid(m_axi_bid),
+
+	.m_axi_arvalid(m_axi_arvalid),
+	.m_axi_arready(m_axi_arready),
+	.m_axi_arid(m_axi_arid),
+	.m_axi_araddr(m_axi_araddr),
+	//~ .m_axi_arregion(m_axi_arregion),
+	.m_axi_arlen(m_axi_arlen),
+	.m_axi_arsize(m_axi_arsize),
+	.m_axi_arburst(m_axi_arburst),
+	//~ .m_axi_arlock(m_axi_arlock),
+	.m_axi_arcache(m_axi_arcache),
+	//~ .m_axi_arprot(m_axi_arprot),
+	//~ .m_axi_arqos(m_axi_arqos),
+
+	.m_axi_rvalid(m_axi_rvalid),
+	.m_axi_rready(m_axi_rready),
+	.m_axi_rid(m_axi_rid),
+	.m_axi_rdata(m_axi_rdata),
+	.m_axi_rresp(m_axi_rresp),
+	.m_axi_rlast(m_axi_rlast),
+
+	// AXI Cache
+	.axi_awvalid(m_axi_cache_awvalid),
+	.axi_awready(m_axi_cache_awready),
+	.axi_awid(m_axi_cache_awid),
+	.axi_awaddr(m_axi_cache_awaddr),
+	//~ .axi_awregion(m_axi_cache_awregion),
+	.axi_awlen(m_axi_cache_awlen),
+	.axi_awsize(m_axi_cache_awsize),
+	.axi_awburst(m_axi_cache_awburst),
+	//~ .axi_awlock(m_axi_cache_awlock),
+	.axi_awcache(m_axi_cache_awcache),
+	.axi_awprot(m_axi_cache_awprot),
+	//~ .axi_awqos(m_axi_cache_awqos),
+
+	.axi_wvalid(m_axi_cache_wvalid),
+	.axi_wready(m_axi_cache_wready),
+	.axi_wdata(m_axi_cache_wdata),
+	.axi_wstrb(m_axi_cache_wstrb),
+	.axi_wlast(m_axi_cache_wlast),
+
+	.axi_bvalid(m_axi_cache_bvalid),
+	.axi_bready(m_axi_cache_bready),
+	.axi_bresp(m_axi_cache_bresp),
+	.axi_bid(m_axi_cache_bid),
+
+	.axi_arvalid(m_axi_cache_arvalid),
+	.axi_arready(m_axi_cache_arready),
+	.axi_arid(m_axi_cache_arid),
+	.axi_araddr(m_axi_cache_araddr),
+	//~ .axi_arregion(m_axi_cache_arregion),
+	.axi_arlen(m_axi_cache_arlen),
+	.axi_arsize(m_axi_cache_arsize),
+	.axi_arburst(m_axi_cache_arburst),
+	//~ .axi_arlock(m_axi_cache_arlock),
+	.axi_arcache(m_axi_cache_arcache),
+	.axi_arprot(m_axi_cache_arprot),
+	//~ .axi_arqos(m_axi_cache_arqos),
+
+	.axi_rvalid(m_axi_cache_rvalid),
+	.axi_rready(m_axi_cache_rready),
+	.axi_rid(m_axi_cache_rid),
+	.axi_rdata(m_axi_cache_rdata),
+	.axi_rresp(m_axi_cache_rresp),
+	.axi_rlast(m_axi_cache_rlast),
+
+	.timer_interrupt(0),
+	.interrupt(0)
+);
+
+endmodule
